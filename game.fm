import Base#
import Matrix

// Data Structures
// --------------

// A value that a cell in the Matrix can have
T Value
| e
| x
| o
  
// Matrix 3x3
GameMap : Type
  Matrix(Value)

T GameState
| game_state(
  map: GameMap,
  is_ative: Bool
  )

Log : Type
  List(GameMap)

T Diagonal
| up 
| down 

// Auxiliary
// ---------

show_formatted_map(size: Nat, str: String) : String
  case size
  + show_formatted_map : Nat -> String -> String // do I need this?
  | zero => nil(_)
  | succ => 
    case str
    | nil  => nil(_)
    | cons => 
      let num = nat_to_number(size)
      if (num .%. 3) .==. 0 then 
        // let new_line = concat(_ str.head, 12) // head is a single element
        cons(_ str.head, show_formatted_map(size.pred, str.tail))
      else 
        cons(_ str.head, show_formatted_map(size.pred, str.tail))
  : String

// Check if two Values are equal
is_value_equal(value: Value, match: Value) : Bool
  case value
  | e => 
    case match
    | e => true
    | x => false
    | o => false
  | x => 
    case match
    | e => false
    | x => true
    | o => false
  | o =>
    case match
    | e => false
    | x => false
    | o => true

// Transforms Nat to Number
nat_to_number(nat: Nat) : Number
  case nat
  | zero => 0
  | succ => 1 .+. (nat_to_number(nat.pred))

// Transforms a Matrix in String of Values
show_matrix(map: GameMap) : String
  case map
  | m_nil  => []
  | m_cons => 
    case map.head as aux
    + map.tail : GameMap
    | e => cons(_ '?', show_matrix(map.tail))
    | x => cons(_ 'x', show_matrix(map.tail))
    | o => cons(_ 'o', show_matrix(map.tail))

equal_x(e : Value) : Bool
  case e 
  | e => false 
  | x => true
  | o => false
  : Bool

equal_o(e : Value) : Bool
  case e 
  | e => false 
  | x => false
  | o => true
  : Bool

// Game states
// -----------
empty_game_map : GameMap
  let l = 
  [e, e, e,
   e, e, e,
   e, e, e]
  list_to_matrix(_ l)

init_game : GameState
  game_state(empty_game_map, true)

// Actions
// -------
// If possible, adds a new Value on empty cell
add_value(value: Value, idx: Nat, map: GameMap) : GameMap
  let index_value = get_value_at(map, idx)
  let index_is_empty = is_value_equal(e, index_value)
  case index_is_empty 
  | true  => set_value_at(value, idx, map)
  | false => map

// Mark value ('x' or 'o') on a cell
set_value_at(val: Value, idx: Nat, map: GameMap) : GameMap
  case idx
  + map: GameMap
  | zero => 
    case map
    | m_nil  => m_nil(_)
    | m_cons => m_cons(_ map.row, map.col, val, map.tail)
  | succ =>
    case map
    | m_nil => m_nil(_)
    | m_cons => m_cons(_ map.row, map.col, map.head, set_value_at(val, idx.pred, map.tail))


get_value_at(map: GameMap, idx: Nat) : Value
  case map
  | m_nil  => e
  | m_cons => case idx
    | zero => map.head
    | succ => get_value_at(map.tail, idx.pred)
  : Value


// Check if the values are all equal to value 'x'
// values: a Matrix of 3 elements
match_x(values: Matrix(Value)) : Maybe(Matrix(Value))
  let filter_x = filter_mx(_ equal_x, values) // list of "x" elements
  let len_filtered = length_mx(_ filter_x)
  if nat_to_number(len_filtered) .==. 3 then
    some(_ values)
  else 
    none(_)

// Check if the values are all equal to value 'o'
// values: a Matrix of 3 elements
match_o(values: Matrix(Value)) : Maybe(Matrix(Value))
  let filter_o = filter_mx(_ equal_o, values) // list of "o" elements
  let len_filtered = length_mx(_ filter_o)
  if nat_to_number(len_filtered) .==. 3 then
    some(_ values)
  else 
    none(_)

// values: a Matrix of 3 elements
match_x_or_o(values: Matrix(Value)) : Maybe(Matrix(Value))
  let match_x = match_x(values)
  case match_x
  | none => match_o(values) // check if match 'o'
  | some => some(_ match_x.value)

// Returns a Matrix 1x3 that stands for a given row in a Matrix 3x3
get_row(map: GameMap, row: Mx_Line) : Matrix(Value)
  mx_get_row(_ map, row, 9n)

// Returns a Matrix 1x3 that stands for a given row in a Matrix 3x3
get_col(map: GameMap, col: Mx_Line) : Matrix(Value)
  mx_get_col(_ map, col, 9n)

// Returns a Matrix 1x3
get_diagonal_up(map: GameMap) : Matrix(Value)
  diagonal_up(_ map, 9n)

// Returns a Matrix 1x3
get_diagonal_down(map: GameMap) : Matrix(Value)
  list_to_matrix(_ [get_value_at(map, 8n), get_value_at(map, 4n), get_value_at(map, 0n)])

// Check combinations
// -----------------

// check_rows(map: GameMap) : Maybe(Matrix(Value))
//   let row_0 = match_x_or_o(get_row(map, l0))
//   case row_0
//   | none => 
//     let row_1 = match_x_or_o(get_row(map, l1))
//     case row_1
//     | none => match_x_or_o(get_row(map, l2)) // returns the result of row 2
//     | some => some(_ row_1.value) // winner on row 1
//   | some => some(_ row_0.value) // winner on row 0

// Retuns if a match was found or not
check_diagonals(map: Matrix(Value), pos: Diagonal) : Maybe(Matrix(Value))
  match_x_or_o(
    case pos
    + map : Matrix(Value)
    | up   => get_diagonal_up(map)
    | down => get_diagonal_down(map)
  )

// Check rows and columns for a match. 
// Retun a Matrix 1x3 if a match was found, otherwise, return none
// f: Matrix 3x3 -> Matrix 1x3. 'f' can be get_row or get_col
check_lines(map: GameMap, f: (GameMap -> Mx_Line -> Matrix(Value)) ) : Maybe(Matrix(Value))
  let case_0 = match_x_or_o( f(map, l0))
  case case_0
  | none => 
    let case_1 = match_x_or_o(f(map, l1))
    case case_1
    | none => match_x_or_o(f(map, l2)) // returns the result of line 2
    | some => some(_ case_1.value) // winner on line 1
  | some => some(_ case_0.value) // winner on line 0

// Check a position of victory in a row, column or diagonal
// Retun a Matrix 1x3 if a match was found, otherwise, return none
check_victory(map: GameMap) : Maybe(Matrix(Value))
  let row = check_lines(map, get_row)
  case row
  | none =>
    let col = check_lines(map, get_col)
    case col 
    | none => 
      let d_up = check_diagonals(map, up)
      case d_up 
      | none => check_diagonals(map, down) // returns the result of diagonal down
      | some => some(_ d_up.value) // match on diagonal up
    | some => some(_ col.value) // match on a col
  | some => some(_ row.value) // match on a row

// ------------------

// Add a new log on map event
add_event_log(entry: GameMap, log: Log) : Log
  cons(_ entry, log)
  
// 1. Game starts with an empty map
// 1st player make his move
// Game adds a new state if the move is valid
// 2nd player make his move
  




