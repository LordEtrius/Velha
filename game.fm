import Base#

// Data Structures
// --------------
T Side
| p1 : 1
| p2 : 2

T Value
| e
| x
| o

T Cell
| cell (value: Value)

get_value(cell: Cell) : Value
  case cell
  | cell => cell.value

show_map(gm: GameMap) : String
  case gm
  | nil  => []
  | cons => case get_value(gm.head) as aux
    | e => cons(_ '_', show_map(gm.tail))
    | x => cons(_ 'x', show_map(gm.tail))
    | o => cons(_ 'o', show_map(gm.tail))

GameMap : Type
  List(Cell)

T GameState
| game_state(
  map: GameMap,
  is_ative: Bool
  )

// Describes the winning triple position
TripleMatch : Type
  List(Number)

// Auxiliary
// ---------
get_value_at(A; index: Nat, xs: List(A), default: A) : A
  let value_at = at(_ index, xs)
  with_default(_ default, value_at)

is_value_equal(value: Value, match: Value) : Bool
  case value
  | e => 
    case match
    | e => true
    | x => false
    | o => false
  | x => 
    case match
    | e => false
    | x => true
    | o => false
  | o =>
    case match
    | e => false
    | x => false
    | o => true

set_value_at(A; val: A, idx: Nat, xs: List(A)) : List(A)
  case idx
  | zero => 
    case xs
    | nil  => nil(_)
    | cons => cons(_ val , xs.tail)
  | succ =>
    case xs
    | nil => nil(_)
    | cons => cons(_ xs.head, set_value_at(_ val, idx.pred, xs.tail))
  


// Game states
// -----------
empty_game_map : GameMap
  [cell(e), cell(e), cell(e),
   cell(e), cell(e), cell(e),
   cell(e), cell(e), cell(e)]

init_game : GameState
  game_state(empty_game_map, true)

// Actions
// -------

// Add a new Value on an empty cells
add_value(value: Value, index: Nat, map: GameMap) : GameMap
  let index_value = get_value_at(_ index, map, cell(e))
  case index_value
  | cell => 
      let index_is_empty = is_value_equal(e, index_value.value)
      case index_is_empty 
      | true  => set_value_at(_ cell(value), index, map)
      | false => map

// match_horizontal(map: GameMap) : List(Number)


// game: GameState
//     game_state(empty_game_map)
//   // game_state(new_board)

main
  let a = [cell(e), cell(e), cell(e),
   cell(e), cell(e), cell(e),
   cell(e), cell(e), cell(e)]
  let new_map = set_value_at(_ cell(x), 1n, a)
  let move_1 = add_value(x, 2n, a)
  let move_2 = add_value(o, 0n, move_1)
  show_map(move_2)
  // let a = [0, 1, 2, 3]
  // set_value_at(_ 9, 5n, a)
  




