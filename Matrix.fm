import Base#

T Matrix<A>
| m_nil
| m_cons(row: Number, col: Number, head: A, tail: Matrix(A))

// // TODO add a proof that the new list a square root of xs lenght
diagonal_up(A; mx: Matrix(A), idx: Nat) : Matrix(A)
  case mx
  | m_nil  => m_nil(_)
  | m_cons =>
    case idx
    | zero => m_nil(_)
    | succ =>  
      if (mx.row .==. mx.col) then
        m_cons(_ mx.row, mx.col, mx.head, diagonal_up(_ mx.tail, idx.pred))
      else
        diagonal_up(_ mx.tail, idx.pred)
  : Matrix(A)

// Transforms a list in a Matrix
list_to_matrix.go(A; xs: List(A), row: Number, col: Number) : Matrix(A)
  case xs
  | nil  => m_nil(_)
  | cons => 
    if row .==. 0 then
      aux_row(_ xs, 0, col)
    else if row .==. 1 then
      aux_row(_ xs, 1, col)
    else
      aux_row(_ xs, 2, col)
  : Matrix (A)

aux_row(A; xs: List(A), row: Number, col: Number) : Matrix(A)
  case xs
  | nil => m_nil(_)
  | cons =>
      if col .==. 0 then 
        m_cons(_ row, 0, xs.head, list_to_matrix.go(_ xs.tail, row, col .+. 1))
      else if col .==. 1 then
        m_cons(_ row, 1, xs.head, list_to_matrix.go(_ xs.tail, row, col .+. 1))
      else
        m_cons(_ row, 2, xs.head, list_to_matrix.go(_ xs.tail, row .+. 1, 0))
  : Matrix(A)

filter_mx(A; stm: (A -> Bool) , mx: Matrix(A)) : Matrix(A)
  case mx
  | m_nil  => m_nil(_)
  | m_cons => 
    let res = stm(mx.head)
    case res
    + mx.tail : Matrix(A)
    | true  => m_cons(_ mx.row, mx.col, mx.head, filter_mx(_ stm, mx.tail))
    | false => filter_mx(_ stm, mx.tail)
  : Matrix(A)

length_mx(A; mx : Matrix(A)) : Nat
  case mx
  | m_nil  => zero
  | m_cons => succ(length_mx(A; mx.tail))

// Transform a matrix in a list
// Obs: loses info like 'row' and 'col'
matrix_to_list(A; mx: Matrix(A)) : List(A)
  case mx 
  | m_nil => nil(_)
  | m_cons => cons(_ mx.head, matrix_to_list(_ mx.tail))

// Auxiliar
// --------
list_to_matrix(A; xs: List(A)) : Matrix(A)
  list_to_matrix.go(_ xs, 0, 0)