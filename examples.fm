import game

matrix_test: Matrix(Value)
  let l =
  [o, e, e,
   e, o, e,
   e, e, x]
  list_to_matrix(_ l)

ex.get_value_at : Value
  get_value_at(matrix_test, 8n)

ex.set_value_at
  show_matrix(set_value_at(x, 2n, matrix_test))

// Output "oox"
ex.diagonal_up
  let a = 
  [o, e, e,
   e, o, e,
   e, e, x]
  show_matrix(diagonal_up(_ list_to_matrix(_ a), 9n))

ex.match_triple : Matrix(Value)
  let l = [x, x, e]
  let m = list_to_matrix(_ l)
  let res = match_x(m)
  case res
  | none => m_nil(_)
  | some => res.value

ex.match_x_or_o_true : String
  let triple = list_to_matrix(_ [o, o, o])
  let match = match_x_or_o(triple)
  case match
  | none => "dont match"
  | some => show_matrix(match.value)

ex.match_x_or_o_false : String
  let triple = list_to_matrix(_ [x, o, x])
  let match = match_x_or_o(triple)
  case match
  | none => "dont match"
  | some => show_matrix(match.value)

ex.check_rows : Maybe(Matrix(Value))
  let map = list_to_matrix(_
  [o, e, e,
   e, o, e,
   x, x, x])
  check_rows(map)

// prints "o??"
ex.get_row
  let map = list_to_matrix(_
  [o, e, e,
   e, o, e,
   x, x, x])
  show_matrix(get_row(map, r0))

// prints "o?x"
ex.get_col 
  let map = list_to_matrix(_
  [o, e, e,
   e, o, e,
   x, x, x])
  show_matrix(get_col(map, r0))

ex.check_lines
  let map = list_to_matrix(_
  [o, e, e,
   e, o, e,
   x, x, x])
  let match = check_lines(map, get_row)
  case match
  | none => "no match"
  | some => show_matrix(match.value)
  

ex.check_win
  let map = list_to_matrix(_
  [o, e, e,
   e, o, e,
   x, x, x])
  let match = check_win(map)
  case match
  | none => "no match"
  | some => show_matrix(match.value)